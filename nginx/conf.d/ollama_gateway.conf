# --- API Key Validation Map ---
map $http_authorization $is_authorized {
    default          0; 
    include          /etc/nginx/custom_conf/api_keys.conf;
}

server {
    listen 80; 
    server_name _; 
    client_max_body_size 100M;

    access_log /var/log/nginx/ollama_access.log main;
    error_log /var/log/nginx/ollama_error.log warn;

    location / {
        # 1. API Key Check
        if ($is_authorized = 0) {
            return 401 "Unauthorized";
        }

        # 2. Call wakeup_service to get a ready GPU instance address
        auth_request /_internal_get_ready_gpu;
        
        # Capture the IP:PORT of the ready GPU from the response header set by wakeup_service
        # Nginx converts "X-Ready-GPU-Addr" to $upstream_http_x_ready_gpu_addr
        auth_request_set $ready_gpu_address $upstream_http_x_ready_gpu_addr;

        if ($ready_gpu_address = "") {
            # This handles if wakeup_service returned 200 OK but no header,
            # or if auth_request itself failed and Nginx didn't automatically use its status.
            # (If auth_request returns 503, Nginx generally sends 503 to client by default)
			return 503 "ServiceError, could not find a ready GPU";
        }

        # 3. Proxy to the specific GPU instance provided by the wakeup_service
        resolver 127.0.0.11 valid=10s; # Docker's internal DNS, good practice with variables

        proxy_pass http://$ready_gpu_address; # Proxy directly to the IP:PORT

        # Standard proxy headers
        proxy_set_header Host $host; # Consider setting Host to $ready_gpu_address or a fixed value if needed
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Nginx proxy timeouts for Ollama's response
        proxy_connect_timeout   90s;
        proxy_send_timeout      600s; 
        proxy_read_timeout      600s; 

        # SSE-friendly settings
        proxy_buffering off;
        proxy_cache off; 
        proxy_set_header Connection ''; 
        proxy_http_version 1.1; 
        chunked_transfer_encoding on; 
    }

    # Internal location for the auth_request to call the wakeup_service
    location = /_internal_get_ready_gpu {
        internal;
        resolver 127.0.0.11 valid=10s;

        # Call a generic endpoint on wakeup_service. No query params needed from Nginx.
        proxy_pass http://wakeup_service:5001/request-instance; 
        
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        
        # Timeout for the wakeup_service to find/start a GPU and respond
        # Should be >= WAKEUP_TIMEOUT_SECONDS in main.py + a small buffer
        proxy_read_timeout      160s; # Example: 2m40s, if WAKEUP_TIMEOUT_SECONDS is 150s
        proxy_connect_timeout   10s;  # Quick connection to the wakeup service
        proxy_send_timeout      10s;  # Request to wakeup service is small
    }
}
