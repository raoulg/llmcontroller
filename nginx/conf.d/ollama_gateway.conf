# --- API Key Validation Map ---
# This map reads the Authorization header from the client's request.
# It includes the api_keys.conf file which is mounted from the host.
# If the header value matches an entry in api_keys.conf, $is_authorized becomes 1.
map $http_authorization $is_authorized {
    default          0; # Deny by default if no match is found
    include          /etc/nginx/custom_conf/api_keys.conf; # Path inside the container where api_keys.conf is mounted
}

# --- Upstream Definition for Ollama Backends ---
# This defines a group of servers to load balance requests to.
# It includes the upstream_ollama.conf file which is mounted from the host.
upstream ollama_backends {
    # You can choose a load balancing method:
    # round_robin; # Default, cycles through servers (good for stateless backends)
    least_conn;  # Sends request to the server with the fewest active connections (often good for Ollama)
    # ip_hash;     # Ensures a client is always directed to the same server (if session persistence is needed)

    include /etc/nginx/custom_conf/upstream_ollama.conf; # Path inside the container
}

server {
    listen 80; # Nginx listens on port 80 inside the container
    server_name _; # Catch-all server name

    # Set a higher client_max_body_size if you expect very large prompts
    client_max_body_size 100M;

    # Location block for all requests to this server
    location / {
        # --- API Key Check ---
        if ($is_authorized = 0) {
            # If $is_authorized is 0 (key invalid or not provided), return 401 Unauthorized
            return 401 "Unauthorized";
            # Alternatively, for a less informative error:
            # return 403 "Forbidden";
        }

        # --- Proxy to Ollama Backends ---
        # If the API key is valid, pass the request to the 'ollama_backends' upstream group
        proxy_pass http://ollama_backends;

        # Standard proxy headers to pass to the backend
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Important for streaming responses from Ollama (Server-Sent Events)
        proxy_buffering off;
        proxy_cache off; # Ollama responses are dynamic, no need to cache them at Nginx
        proxy_set_header Connection ''; # Clear Connection header if client sends "close"
        proxy_http_version 1.1; # Required for keepalive connections and SSE
        chunked_transfer_encoding on; # Useful for streaming
    }

    # Define access and error log paths (these will be mapped to the host via Docker Compose)
    access_log /var/log/nginx/ollama_access.log;
    error_log /var/log/nginx/ollama_error.log warn; # Log warnings and above
}
